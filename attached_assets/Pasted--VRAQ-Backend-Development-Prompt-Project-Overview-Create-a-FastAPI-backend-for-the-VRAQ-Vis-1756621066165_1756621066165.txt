# VRAQ Backend Development Prompt

## Project Overview
Create a FastAPI backend for the VRAQ (Visual Recognition and Quality Assurance) system that performs PCB defect detection using OpenCV template matching.

## Core Requirements

### 1. Project Structure
```
vraq_backend/
├── main.py                 # FastAPI application
├── models/
│   ├── __init__.py
│   ├── detection.py        # Defect detection models
│   └── image_processing.py # Image preprocessing utilities
├── templates/              # Template images directory
│   ├── resistor_01.png
│   ├── capacitor_01.png
│   └── ...
├── uploads/               # Temporary uploaded images
├── config/
│   ├── __init__.py
│   └── settings.py        # Configuration settings
└── requirements.txt       # Dependencies
```

### 2. Key Features to Implement

#### Image Processing Module (`models/image_processing.py`)
- Grayscale conversion function
- Image normalization (0-1 range)
- Adaptive thresholding
- Noise reduction using Gaussian blur
- Image resizing and cropping utilities

#### Detection Engine (`models/detection.py`)
- Template matching using `cv2.TM_CCOEFF_NORMED`
- Confidence threshold detection (default: 0.8)
- Location tolerance checking (pixel distance)
- Multi-component batch processing
- Defect classification: "OK", "Missing", "Misaligned"

#### API Endpoints (`main.py`)
```python
# Main endpoints to create:
POST /api/v1/analyze-pcb
    - Accept: reference PCB image, test PCB image
    - Return: JSON defect report with coordinates

POST /api/v1/upload-templates
    - Accept: Multiple template images
    - Store in templates directory

GET /api/v1/templates
    - Return: List of available templates

GET /api/v1/health
    - Return: System health status
```

### 3. Expected Response Format
```json
{
  "analysis_id": "uuid",
  "timestamp": "2025-08-31T10:00:00Z",
  "overall_status": "DEFECTS_FOUND",
  "components": [
    {
      "name": "resistor_01",
      "status": "OK",
      "confidence": 0.95,
      "expected_location": [100, 200],
      "detected_location": [102, 198],
      "deviation_pixels": 2.8
    },
    {
      "name": "capacitor_05",
      "status": "MISSING",
      "confidence": 0.32,
      "expected_location": [300, 400],
      "detected_location": null,
      "deviation_pixels": null
    }
  ],
  "vr_data": {
    "defect_markers": [
      {
        "position": {"x": 0.3, "y": 0, "z": 0.4},
        "type": "MISSING",
        "component": "capacitor_05"
      }
    ]
  }
}
```

### 4. Technical Specifications
- **Framework**: FastAPI with async support
- **Image Processing**: OpenCV (cv2)
- **File Handling**: Support for PNG, JPG, TIFF formats
- **Validation**: Pydantic models for request/response validation
- **Error Handling**: Comprehensive exception handling
- **Logging**: Structured logging with rotation
- **Configuration**: Environment-based settings

### 5. Performance Requirements
- Process 1920x1080 images within 5 seconds
- Support concurrent requests (up to 10 simultaneous)
- Memory efficient template caching
- Configurable confidence and tolerance thresholds

### 6. Dependencies
```
fastapi>=0.100.0
uvicorn[standard]>=0.23.0
opencv-python>=4.8.0
numpy>=1.24.0
pillow>=10.0.0
pydantic>=2.0.0
python-multipart
aiofiles
```

### 7. Environment Variables
```
TEMPLATE_DIR=./templates
UPLOAD_DIR=./uploads
CONFIDENCE_THRESHOLD=0.8
LOCATION_TOLERANCE=10
MAX_FILE_SIZE=10485760  # 10MB
ALLOWED_EXTENSIONS=png,jpg,jpeg,tiff
```

## Development Guidelines
1. Use async/await for file operations
2. Implement proper error handling and logging
3. Add input validation for image formats and sizes
4. Include comprehensive docstrings
5. Write unit tests for core functions
6. Add CORS support for frontend integration
7. Implement request rate limiting
8. Add health check endpoints

## Testing Strategy
- Unit tests for image processing functions
- Integration tests for API endpoints
- Performance benchmarks with sample PCB images
- Error handling validation

Please create a production-ready FastAPI backend following these specifications.