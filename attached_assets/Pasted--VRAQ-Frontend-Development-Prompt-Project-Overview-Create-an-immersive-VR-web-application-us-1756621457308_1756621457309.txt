# VRAQ Frontend Development Prompt

## Project Overview
Create an immersive VR web application using A-Frame and Three.js that visualizes PCB defect detection results from the VRAQ backend in a 3D virtual environment.

## Core Requirements

### 1. Project Structure
```
vraq_frontend/
├── index.html              # Main VR scene
├── assets/
│   ├── css/
│   │   └── style.css       # Custom styles
│   ├── js/
│   │   ├── vraq-client.js  # Backend communication
│   │   ├── defect-marker.js # Custom A-Frame component
│   │   └── ui-controls.js   # VR UI interactions
│   ├── models/
│   │   └── pcb-board.gltf  # 3D PCB model
│   └── textures/
│       └── pcb-texture.jpg # PCB board texture
└── components/
    ├── defect-visualizer.js # Main visualization component
    └── info-panel.js        # Information display component
```

### 2. Key Features to Implement

#### VR Scene Setup (`index.html`)
- Basic A-Frame scene with proper lighting
- VR camera with teleportation controls
- Hand tracking and cursor interactions
- 3D PCB model positioned at scene center
- Skybox or laboratory environment
- UI panels for controls and information

#### Backend Integration (`assets/js/vraq-client.js`)
```javascript
class VRAQClient {
  constructor(apiUrl) { ... }
  
  async uploadImages(referenceImage, testImage) { ... }
  async getAnalysisResults(analysisId) { ... }
  async getTemplateList() { ... }
  formatDefectsForVR(apiResponse) { ... }
}
```

#### Custom A-Frame Components

##### Defect Marker Component (`assets/js/defect-marker.js`)
```javascript
AFRAME.registerComponent('defect-marker', {
  schema: {
    defectType: {type: 'string', default: 'MISSING'},
    confidence: {type: 'number', default: 0.0},
    componentName: {type: 'string', default: ''},
    position: {type: 'vec3'},
    animateOnHover: {type: 'boolean', default: true}
  },
  
  init() { ... },          // Create marker geometry
  update() { ... },        // Update marker appearance
  handleHover() { ... },   // Show detailed information
  handleClick() { ... }    // Trigger detailed view
});
```

##### PCB Visualizer Component (`components/defect-visualizer.js`)
```javascript
AFRAME.registerComponent('pcb-visualizer', {
  schema: {
    apiUrl: {type: 'string', default: 'http://localhost:8000'},
    autoRefresh: {type: 'boolean', default: false},
    refreshInterval: {type: 'number', default: 5000}
  },
  
  init() { ... },              // Initialize component
  loadDefectData() { ... },    // Fetch and process defect data
  createDefectMarkers() { ... }, // Generate 3D markers
  updateMarkers() { ... },     // Update existing markers
  handleNewAnalysis() { ... }  // Process new analysis results
});
```

### 3. VR Scene Structure
```html
<a-scene 
  vr-mode-ui="enabled: true"
  embedded
  style="height: 100vh; width: 100vw;">
  
  <!-- Assets -->
  <a-assets>
    <a-gltf-model id="pcb-model" src="./assets/models/pcb-board.gltf"></a-gltf-model>
    <img id="pcb-texture" src="./assets/textures/pcb-texture.jpg">
  </a-assets>
  
  <!-- Lighting -->
  <a-light type="ambient" color="#404040"></a-light>
  <a-light type="directional" position="0 5 0" color="#ffffff"></a-light>
  
  <!-- PCB Model -->
  <a-entity 
    id="pcb-board"
    gltf-model="#pcb-model"
    position="0 1 -3"
    pcb-visualizer="apiUrl: http://localhost:8000">
  </a-entity>
  
  <!-- VR Camera with Controls -->
  <a-entity 
    id="rig"
    movement-controls="fly: false"
    position="0 1.6 2">
    
    <a-camera 
      look-controls="pointerLockEnabled: true"
      wasd-controls>
      
      <!-- VR Controllers -->
      <a-cursor
        position="0 0 -1"
        geometry="primitive: ring"
        material="color: #ffffff; shader: flat"
        raycaster="objects: .clickable">
      </a-cursor>
      
    </a-camera>
  </a-entity>
  
  <!-- UI Panels -->
  <a-plane 
    id="info-panel"
    position="-2 2 -2"
    width="2" height="1.5"
    color="#000000"
    opacity="0.8"
    text="value: PCB Analysis Results; color: #ffffff; align: center">
  </a-plane>
  
  <!-- Control Panel -->
  <a-plane 
    id="control-panel"
    position="2 2 -2"
    width="2" height="1.5"
    color="#333333"
    opacity="0.9">
  </a-plane>
  
</a-scene>
```

### 4. Visual Design Specifications

#### Defect Marker Styles
- **Missing Components**: Red pulsing sphere with warning icon
- **Misaligned Components**: Yellow rotating cube with arrow indicator  
- **OK Components**: Green subtle glow effect
- **Interactive States**: Scale animation on hover, detailed info on click

#### Color Scheme
- Primary: Deep blue (#1a237e) for UI elements
- Success: Bright green (#4caf50) for OK components
- Warning: Amber (#ffc107) for misaligned components
- Error: Red (#f44336) for missing components
- Background: Dark gradient (#0a0a0a to #1a1a1a)

#### UI Elements
- Semi-transparent panels with glassmorphism effect
- Floating information tooltips
- Progress indicators for analysis
- Interactive buttons with hover effects

### 5. Interactive Features

#### File Upload Interface
- Drag & drop zone for PCB images
- Progress indicators during upload
- Preview thumbnails
- Error handling and validation

#### Real-time Analysis Display
- Live progress updates during backend processing
- Animated markers appearing as defects are detected
- Confidence level visualization (color intensity)
- Component identification labels

#### Navigation & Controls
- Teleportation points around the PCB
- Zoom in/out functionality
- Rotate view controls
- Reset camera position button

### 6. Performance Optimization
- Efficient 3D model loading with LOD (Level of Detail)
- Marker instancing for multiple defects
- Throttled API calls to prevent spam
- Lazy loading of detailed component information
- WebGL optimization for smooth VR experience

### 7. Browser Compatibility
- Chrome/Chromium (recommended for VR)
- Firefox with WebXR support
- Edge with VR capabilities
- Mobile VR support (experimental)

### 8. Responsive Design
- Desktop fallback (mouse & keyboard controls)
- Mobile touch controls
- Tablet interface optimization
- VR headset compatibility (Oculus, HTC Vive, etc.)

## Technical Implementation Details

### API Integration
```javascript
// Example usage
const client = new VRAQClient('http://localhost:8000');

// Upload images and get analysis
const analysisId = await client.uploadImages(refImage, testImage);
const results = await client.getAnalysisResults(analysisId);

// Convert to VR coordinates
const vrDefects = client.formatDefectsForVR(results);

// Update VR scene
document.querySelector('#pcb-board').setAttribute('pcb-visualizer', {
  defects: vrDefects
});
```

### Error Handling
- Network connectivity issues
- Invalid image formats
- Backend service unavailable
- VR hardware not available
- Performance degradation fallbacks

### Accessibility
- Keyboard navigation support
- Screen reader compatibility
- High contrast mode
- Reduced motion options

## Development Guidelines
1. Follow A-Frame best practices and performance guidelines
2. Use ES6+ JavaScript features with proper browser support
3. Implement proper error handling and user feedback
4. Add loading states and progress indicators
5. Ensure VR comfort (proper frame rates, motion sickness prevention)
6. Test across different VR devices and browsers
7. Implement proper cleanup for 3D resources

## Testing Requirements
- Cross-browser VR compatibility testing
- Performance benchmarking (60+ FPS target)
- User experience testing with actual VR headsets
- Mobile device compatibility testing
- API integration testing with mock data

Please create a cutting-edge, immersive VR frontend that provides an intuitive and engaging way to visualize PCB defect analysis results.